---
# Check if a local keyring file is present
- name: cluster | Check if node has already been bootstrapped
  stat:
    path: "{{ consul_data_dir}}/serf/local.keyring"
  register: keyring_exists
  ignore_errors: true
  become: true

- block:
  # Gather the currently used encryption key of the cluster
  - name: cluster | Fetch active encryption key
    slurp:
      src: "{{ consul_data_dir}}/serf/local.keyring"
    register: keyring_value
    become: true

  # Set consul_encryption_key_active to allow comparison in next step
  - name: cluster | Set fact consul_encryption_key_active
    set_fact:
      consul_encryption_key_active: "{{ keyring_value['content'] | b64decode | from_json | first }}"
    no_log: true
    become: true

  # Inform the user the the node's key does not match his given key in consul_encryption_key and remove the host from play
  - name: cluster | Compare active key with consul_encryption_key
    fail:
      msg: >
          "ATTENTION: This node uses another encryption key then defined in consul_encryption_key!
          The active key can be found locally in {{ consul_data_dir}}/serf/local.keyring"
          Update the variable consul_encryption_key!
          Removing node from play.
    become: true
    when: consul_encryption_key_active != consul_encryption_key

  when: keyring_exists.stat.exists
