---
- name: config_consul | downloading consul
  get_url:
    url: "{{ consul_dl_url }}/{{ consul_dl_file }}"
    dest: "/opt"
  become: true

- name: config_consul | extracting consul binary
  unarchive:
    src: "/opt/{{ consul_dl_file }}"
    dest: "{{ consul_bin_path }}"
    copy: no
    creates: "{{ consul_bin_path }}/consul"
  become: true
  when: not ansible_check_mode

# We create the consul group
- name: config_consul | creating consul group
  group:
    name: "{{ consul_group }}"
    state: present
  become: true

# We create the consul user and add it to the consul group
- name: config_consul | creating consul user
  user:
    name: "{{ consul_user }}"
    group: "{{ consul_group }}"
    system: yes
  become: true

# We create the required consul configuration folders
- name: config_consul | creating consul configuration folders
  file:
    path: "{{ item }}"
    owner: "root"
    group: "root"
    state: "directory"
  become: true
  with_items:
    - '{{ consul_config_dir }}'
#    - '{{ consul_config_dir }}/bootstrap'
    - '{{ consul_config_dir }}/client'
    - '{{ consul_config_dir }}/scripts'
#    - '{{ consul_config_dir }}/server'

# We create the consul data folder
- name: config_consul | creating consul data folder
  file:
    path: "{{ consul_data_dir }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    state: "directory"
  become: true

# We check for an existing encryption key
# This is not the most secure and probably should be handled differently
- name: config_consul | Checking If Consul Encryption Key Has Already Been Generated
  stat:
    path: "{{ consul_key_file }}"
  register: "_consul_key_file"
  when: inventory_hostname == consul_master

# We generate the encryption key if it does not already exist
- name: config_consul | Generating Consul Encryption Key
  command: "consul keygen"
  register: "_consul_encryption_key"
  no_log: true
  when: >
        inventory_hostname == consul_master and
        not _consul_key_file['stat']['exists']

# We do this when consul encryption key has already been generated and stored
- name: config_consul | Capturing Existing Consul Encryption Key
  command: "cat {{ consul_key_file }}"
  register: "_consul_encryption_key_read"
  no_log: true
  changed_when: false
  become: true
  when: >
        inventory_hostname == consul_master and
        _consul_key_file['stat']['exists']

# We do this when we generate a new encryption key
- name: config_consul | Settting consul_encryption_key Fact On Consul Master
  set_fact:
    consul_encryption_key: "{{ _consul_encryption_key['stdout'] }}"
  no_log: true
  when: >
        inventory_hostname == consul_master and
        _consul_encryption_key['changed'] and
        not ansible_check_mode

# We do this when consul encryption key has already been generated and stored
- name: config_consul | Settting consul_encryption_key Fact On Consul Master
  set_fact:
    consul_encryption_key: "{{ _consul_encryption_key_read['stdout'] }}"
  no_log: true
  when: >
        inventory_hostname == consul_master and
        _consul_key_file['stat']['exists'] and
        not ansible_check_mode

- name: config_consul | Setting consul_encryption_key Fact On Non Consul Master
  set_fact:
     consul_encryption_key: "{{ hostvars[consul_master]['consul_encryption_key'] }}"
  no_log: true
  when: >
        inventory_hostname != consul_master and
        not ansible_check_mode

# We store the encryption key on all of consul servers group in order to
# preserve the key if for any reason consul_master were to disappear or crash
# This is not the most secure and probably should be handled differently
- name: config_consul | Storing Consul Encryption Key
  template:
    src: "etc/consul.key.j2"
    dest: "{{ consul_key_file }}"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o="
  no_log: true
  become: true
  when: >
        inventory_hostname in groups[consul_servers_group] and
        not ansible_check_mode

# This is not the most secure and probably should be handled differently
- name: config_consul | Checking For Existing acl_master_token
  stat:
    path: "{{ consul_acl_master_token_file }}"
  register: "_consul_acl_master_token_file"
  changed_when: false
  when: >
        consul_enable_acls and
        inventory_hostname == consul_master

- name: config_consul | Generating consul_acl_master_token_file
  command: "uuidgen"
  register: "_consul_acl_master_token"
  no_log: true
  when: >
        inventory_hostname == consul_master and
        consul_enable_acls and
        not _consul_acl_master_token_file['stat']['exists']

# We do this when consul encryption key has already been generated and stored
# This is not the most secure and probably should be handled differently
- name: config_consul | Capturing Existing consul_acl_master_token_file
  command: "cat {{ consul_acl_master_token_file }}"
  register: "_consul_acl_master_token_read"
  no_log: true
  changed_when: false
  become: true
  when: >
        inventory_hostname == consul_master and
        _consul_acl_master_token_file['stat']['exists']

- name: config_consul | Setting consul_acl_master_token On Consul Master
  set_fact:
    consul_acl_master_token: "{{ _consul_acl_master_token['stdout'] }}"
  no_log: true
  when: >
        consul_enable_acls and
        inventory_hostname == consul_master and
        _consul_acl_master_token['changed']

- name: config_consul | Setting consul_acl_master_token On Consul Master
  set_fact:
    consul_acl_master_token: "{{ _consul_acl_master_token_read['stdout'] }}"
  no_log: true
  when: >
        consul_enable_acls and
        inventory_hostname == consul_master and
        _consul_acl_master_token_file['stat']['exists'] and
        not ansible_check_mode

- name: config_consul | Setting consul_acl_master_token On Non Consul Master
  set_fact:
    consul_acl_master_token: "{{ hostvars[consul_master]['consul_acl_master_token'] }}"
  no_log: true
  when: >
        consul_enable_acls and
        inventory_hostname != consul_master and
        not ansible_check_mode

# We store the ACL Master Token on all of consul servers group in order to
# preserve the key if for any reason consul_master were to disappear or crash
# This is not the most secure and probably should be handled differently
- name: config_consul | Storing Consul ACL Master Token
  template:
    src: "etc/consul_acl_master_token.j2"
    dest: "{{ consul_acl_master_token_file }}"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o="
  no_log: true
  become: true
  when: >
        inventory_hostname in groups[consul_servers_group] and
        not ansible_check_mode

- name: config_consul | configuring consul
  template:
    src: "etc/consul.d/config.json.j2"
    dest: "{{ consul_config_dir }}/config.json"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r"
  register: "consul_reconfigured"
  no_log: true
  become: true
  notify:
    - "restart consul"
  when: >
        (inventory_hostname in groups[consul_clients_group] or
        inventory_hostname in groups[consul_servers_group]) and
        not ansible_check_mode

- name: config_consul | creating consul client folders
  file:
    path: "{{ consul_home }}"
    state: "directory"
  become: true
  when: >
        inventory_hostname in groups[consul_clients_group]

- name: config_consul | downloading consul ui
  get_url:
    url: "{{ consul_dl_url }}/{{ consul_ui_dl_file }}"
    dest: "/opt"
  become: true
  when: >
        inventory_hostname in groups[consul_clients_group]

- name: config_consul | extracting consul ui
  unarchive:
    src: "/opt/{{ consul_ui_dl_file }}"
    dest: "{{ consul_home }}"
    copy: no
    creates: "{{ consul_home }}/index.html"
  become: true
  when: >
        inventory_hostname in groups[consul_clients_group] and
        not ansible_check_mode

- name: config_consul | setting permissions on consul home folder
  file:
    path: "{{ consul_home }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    recurse: yes
    state: "directory"
  become: true
  when: >
        inventory_hostname in groups[consul_clients_group]

- name: config_consul | configuring consul init service (Ubuntu)
  template:
    src: "etc/init/consul.conf.j2"
    dest: "/etc/init/consul.conf"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r"
  become: true
  notify: "restart consul"
  when: >
        (ansible_distribution == "Ubuntu" and
        ansible_distribution_version <= '14.04') and
        (inventory_hostname in groups[consul_clients_group] or
        inventory_hostname in groups[consul_servers_group])

- name: config_consul | configuring consul systemd service
  template:
    src: "etc/systemd/system/consul.service.j2"
    dest: "/etc/systemd/system/consul.service"
    owner: root
    group: root
    mode: 0644
  become: true
  notify: restart consul
  when: >
        (ansible_distribution == "Debian" or
        (ansible_distribution == "Ubuntu" and
        ansible_distribution_version >= '16.04') or
        ansible_os_family == "RedHat") and
        (inventory_hostname in groups[consul_clients_group] or
        inventory_hostname in groups[consul_servers_group])

- name: config_consul | ensuring consul service is enabled
  service:
    name: "consul"
    enabled: yes
  become: true
  when: not ansible_check_mode

# This ensures that configurations are in place prior to configuring app_services
- name: config_consul | restarting consul if re-configured
  service:
    name: "consul"
    state: "restarted"
  become: true
  when: >
        consul_reconfigured['changed'] and
        not ansible_check_mode

- name: config_consul | checking to ensure consul agent is listening
  wait_for:
    port: 8500
    delay: 10
  when: >
        consul_reconfigured['changed'] and
        not ansible_check_mode
